version: 2.1

orbs:
  docker: circleci/docker@2.8.2
  browser-tools: circleci/browser-tools@1.5.2

parameters:
  CI_UTILS_IMAGE_TAG:
    type: string
    default: "v4.3.0"

commands:
  clone-pdfapi-config:
    steps:
      - add_ssh_keys
      - run:
          name: Prepare GitHub Access
          command: |
            ssh-keyscan github.com > ~/.ssh/known_hosts
            git clone git@github.com:psu-libraries/pdfapi-config.git

  compute-docker-tag:
    steps:
      - run:
          name: Compute Docker Tag
          command: |
            if [[ "$CIRCLE_BRANCH" == "main" ]]; then
              TAG="$CIRCLE_SHA1"
            else
              SLUG=$(slugify-branch "$CIRCLE_BRANCH")
              TAG="${SLUG}--$CIRCLE_SHA1"
            fi
            echo "export TAG=$TAG" >> "$BASH_ENV"

executors:
  ci-utils:
    parameters:
      image_tag:
        type: string
    docker:
      - image: harbor.k8s.libraries.psu.edu/library/ci-utils:<< parameters.image_tag >>

jobs:

  build-and-push:
    environment:
      REGISTRY_HOST: harbor.k8s.libraries.psu.edu
      REGISTRY_REPO: "library/$CIRCLE_PROJECT_REPONAME"
    executor:
      name: ci-utils
      image_tag: << pipeline.parameters.CI_UTILS_IMAGE_TAG >>
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Checkout Branch
          command: |
            export TRIGGERED_BY="$CIRCLE_USERNAME"
            if [[ "$CIRCLE_BRANCH" == update/* ]]; then
              git fetch origin "$CIRCLE_BRANCH"
              git checkout "$CIRCLE_BRANCH"
              echo "Now on branch: $(git rev-parse --abbrev-ref HEAD)"
            else
              echo "Using detached HEAD at commit: $CIRCLE_SHA1"
            fi
      - compute-docker-tag
      - docker/check:
          registry: $REGISTRY_HOST
      - docker/build:
          image: $REGISTRY_REPO
          registry: $REGISTRY_HOST
          tag: $TAG
          use-buildkit: true
      - docker/push:
          image: $REGISTRY_REPO
          registry: $REGISTRY_HOST
          tag: $TAG

  deploy-application:
    executor:
      name: ci-utils
      image_tag: << pipeline.parameters.CI_UTILS_IMAGE_TAG >>
    environment:
      CONFIG_REPO: git@github.com:psu-libraries/pdfapi-config.git
    steps:
      - clone-pdfapi-config
      - compute-docker-tag
      - run:
          name: Generate Application
          command: |
            export TRIGGERED_BY="$CIRCLE_USERNAME"
            cd pdfapi-config
            ./bin/generate_application

  release-image:
    executor:
      name: ci-utils
      image_tag: << pipeline.parameters.CI_UTILS_IMAGE_TAG >>
    environment:
      CONFIG_REPO: git@github.com:psu-libraries/pdf_accessibility_api.git
      REGISTRY_HOST: harbor.k8s.libraries.psu.edu
      REGISTRY_REPO: library/pdf_accessibility_api
      GITHUB_USER: 'psu-stewardship-bot'
    steps:
      - clone-pdfapi-config
      - run:
          name: "Release"
          command: |
            export TRIGGERED_BY="$CIRCLE_USERNAME"
            export REGISTRY_REPO="$CIRCLE_PROJECT_REPONAME"
            /usr/local/bin/tag-image
            cd pdf_accessibility_api
            ./bin/pr-release clusters/prod/manifests/prod.yaml

  test-application:
    docker:
      - image: cimg/ruby:3.4.1
        environment:
          RAILS_ENV: test
          MYSQL_PASSWORD: pdf_accessibility_api
          REGISTRY_HOST: harbor.k8s.libraries.psu.edu
          REGISTRY_REPO: library/psulib_blacklight
          GITHUB_USER: 'psu-stewardship-bot'
          CONFIG_REPO: git@github.com:psu-libraries/pdf_accessibility_api.git
    steps:
      - checkout
      - setup_remote_docker:
          version: docker24
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            gem install bundler -v "$(grep -A 1 'BUNDLED WITH' Gemfile.lock | tail -n 1 | xargs)"
            bundle _$(grep -A 1 'BUNDLED WITH' Gemfile.lock | tail -n 1 | xargs)_ install
      - run:
          name: Build and run containers
          command: docker-compose up -d --build
      - run:
          name: Wait for mysql to be ready
          command: docker-compose exec web bash ./wait_for_db.sh
      - run:
          name: "Lint"
          command: docker-compose exec -T web bundle exec niftany
      - run:
          name: "Run tests"
          command: RAILS_ENV=test docker-compose exec -it web bundle exec rspec

  publish:
    executor:
      name: docker/docker
      tag: "3.8"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - docker/check:
          registry: harbor.k8s.libraries.psu.edu
      - docker/build:
          image: library/pdf_accessibility_api
          registry: harbor.k8s.libraries.psu.edu
          use-buildkit: true
          extra_build_args: "--target production"
      - docker/push:
          digest-path: /tmp/digest.txt
          image: library/pdf_accessibility_api
          registry: harbor.k8s.libraries.psu.edu
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

  test:
    docker:
      - image: cimg/ruby:3.4.1
        environment:
          RAILS_ENV: test
          MYSQL_PASSWORD: pdf_accessibility_api
          REGISTRY_HOST: harbor.k8s.libraries.psu.edu
          REGISTRY_REPO: library/psulib_blacklight
          GITHUB_USER: 'psu-stewardship-bot'
          CONFIG_REPO: git@github.com:psu-libraries/pdf_accessibility_api.git
    steps:
      - checkout
      - setup_remote_docker:
          version: docker24
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            gem install bundler -v "$(grep -A 1 'BUNDLED WITH' Gemfile.lock | tail -n 1 | xargs)"
            bundle _$(grep -A 1 'BUNDLED WITH' Gemfile.lock | tail -n 1 | xargs)_ install
      - run:
          name: Build and run containers
          command: docker-compose up -d --build
      - run:
          name: Wait for mysql to be ready
          command: docker-compose exec web bash ./wait_for_db.sh
      - run:
          name: "Lint"
          command: docker-compose exec -T web bundle exec niftany
      - run:
          name: "Run tests"
          command: RAILS_ENV=test docker-compose exec -it web bundle exec rspec

workflows:

  docker_push:
    jobs:
      - build-and-push:
          context:
            - org-global
          filters:
            branches:
              only:
                - jimtest
          name: build-and-push
          requires:
            - test-application
      - deploy-application:
          context:
            - org-global
          filters:
            branches:
              only:
                - jimtest
                - /preview\/.*/
          name: deploy-image
          requires:
            - build-and-push
      - release-image:
          context:
            - org-global
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+.*/
            branches:
              ignore: /.*/
          name: release-image
          requires:
            - build-and-push
      - test-application:
          context:
            - org-global
          name: test-application

  version: 2
  pdf_accessibility_api:
    jobs:
      - publish:
          context:
            - org-global
          filters:
            branches:
              only:
                - main
                - /preview\/.*/
      - test:
          context:
            - org-global
          filters:
            branches:
              only:
                - main
                - /preview\/.*/