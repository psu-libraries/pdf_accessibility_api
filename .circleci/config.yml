version: 2.1

orbs:
   docker: circleci/docker@2.6.0
   browser-tools: circleci/browser-tools@1.5.2

jobs:
  publish:
    executor:
      name: docker/docker
      tag: "3.8"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - docker/check:
          registry: harbor.k8s.libraries.psu.edu
      - docker/build:
          image: library/pdf_accessibility_api
          registry: harbor.k8s.libraries.psu.edu
          use-buildkit: true
          extra_build_args: "--target production"
      - docker/push:
          digest-path: /tmp/digest.txt
          image: library/pdf_accessibility_api
          registry: harbor.k8s.libraries.psu.edu
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"
  test:
    docker:
      - image: cimg/ruby:3.4.1
        environment:
          RAILS_ENV: test
          MYSQL_PASSWORD: pdf_accessibility_api
          REGISTRY_HOST: harbor.k8s.libraries.psu.edu
          REGISTRY_REPO: library/psulib_blacklight
          GITHUB_USER: 'psu-stewardship-bot'
          CONFIG_REPO: git@github.com:psu-libraries/pdf_accessibility_api.git
    steps:
      - checkout
      - setup_remote_docker:
          version: docker24
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            gem install bundler -v "$(grep -A 1 'BUNDLED WITH' Gemfile.lock | tail -n 1 | xargs)"
            bundle _$(grep -A 1 'BUNDLED WITH' Gemfile.lock | tail -n 1 | xargs)_ install
      - run:
          name: Build and run containers
          command: docker-compose up -d --build
      - run:
          name: Wait for mysql to be ready
          command: docker-compose exec web bash ./wait_for_db.sh
      - run:
          name: "Lint"
          command: docker-compose exec -T web bundle exec niftany
      - run:
          name: "Run tests"
          command: RAILS_ENV=test docker-compose exec -it web bundle exec rspec

workflows:
  version: 2
  pdf_accessibility_api:
    jobs:
      - publish:
          context: 
            - org-global
          filters:
            branches:
              only:
                - main
                - /preview\/.*/  
      # - deploy:
      #     context: 
      #       - org-global
      #     requires:
      #       - test
      #       - publish
      #     filters:
      #       branches:
      #         only:
      #           - main
      #           - /preview\/.*/                  
      - test
